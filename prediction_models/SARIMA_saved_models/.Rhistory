test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
head(results)
?auto.arima
model$coef
x_train
model$sigma2
model$arma
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
results = setNames(data.frame(matrix(ncol = length(futures), nrow = 782)), futures)
# Add Date column
test_dates = rownames(test_data)
stack_dates = rownames(stack_data)
dates = c(test_dates, stack_dates)
results["DATE"] = dates
pointer = 1
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
for (future in futures) {
if (pointer != 1) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
model
for (future in futures) {
if (pointer != 2) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
model
model$coef
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
model$coef
model$coef[1]
# store model params
write.txt(model$coef, file="x.txt")
# store model params
write.table(model$coef, file="x.txt")
params = setNames(data.frame(matrix(ncol = 10, nrow = 157)), list('ar1,ar2,ar3,ar4,ar5,ma1,ma2,ma3,ma4,ma5'))
head(params)
model$coef
for (i in model$coef){print(i)}
model$model
model$arma
model$coef
model$coef[0]
model$coef[[1]]
model$coef[1]
model$coef[[0]]
library(broom)
tidy(model)
tidy(model)[,:-1]
tidy(model)[,-1]
tidy(model)[,:2]
filename = "F_AD" + str(1) + ".txt"
filename = paste("F_AD",str(1),".txt")
filename = paste(c("F_AD",str(1),".txt"))
filename
str(1)
filename = paste("F_AD",i,".txt")
filename
write.txt(tidy(model), file = filename)
write.table(tidy(model), file = filename)
for (future in futures) {
if (pointer != 2) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
for (future in futures) {
if (pointer != 2) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
head(result)
head(results)
results = setNames(data.frame(matrix(ncol = length(futures), nrow = 782)), futures)
# Add Date column
test_dates = rownames(test_data)
stack_dates = rownames(stack_data)
dates = c(test_dates, stack_dates)
results["DATE"] = dates
pointer = 1
library(broom)
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
for (future in futures) {
if (pointer != 3) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
model$coef
results = setNames(data.frame(matrix(ncol = length(futures), nrow = 782)), futures)
# Add Date column
test_dates = rownames(test_data)
stack_dates = rownames(stack_data)
dates = c(test_dates, stack_dates)
results["DATE"] = dates
pointer = 1
library(broom)
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
for (future in futures) {
if (pointer != 1) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i+1,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
head(results)
pointer
for (future in futures) {
if (pointer != 2) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i+1,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
pointer
pointer=2
for (future in futures) {
if (pointer != 2) {next}
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i+1,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
results = setNames(data.frame(matrix(ncol = length(futures), nrow = 782)), futures)
# Add Date column
test_dates = rownames(test_data)
stack_dates = rownames(stack_data)
dates = c(test_dates, stack_dates)
results["DATE"] = dates
pointer =1
library(broom)
setwd("~/GitHub/ARIMAMAS/prediction_models/SARIMA_saved_models")
for (future in futures) {
# get close price and forward fill NaNs
x_train = na.locf(train_data[,(pointer*4)])
x_test = na.locf(test_data[,(pointer*4)])
stack_test = na.locf(stack_data[,(pointer*4)])
# take log
x_train = log(x_train)
x_test = log(x_test)
x_test = c(NaN, x_test)   # first row has no close price
stack_test = log(stack_test)
stack_test = c(NaN, stack_test)   # first row has no close price
x_and_stack_test = c(x_test, stack_test)
period = 5 ## 5 trading days in a week
S = period
library(forecast)
allpred = vector()
batch_size = 5
iterations = length(x_and_stack_test)/batch_size
# Build SARIMAX model iteratively to perform 1-step ahead forecast (for each trading week)
for (i in 1:iterations) {
train = c(x_train, x_and_stack_test[1:batch_size*(i-1)])
# train model for all data up to simulated prediction day
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(batch_size*(i-1) + 1):batch_size*i]
pred = forecast(model, h = 5)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
}
train = c(x_train, x_and_stack_test[1:(length(x_and_stack_test)-2)])
model = auto.arima(train, d = 1, max.p = 5, max.q =5 #, xreg = as.matrix(rbind(train_indicators, test_and_stack_indicators[1:batch_size*(i-1)]))
,trace=FALSE)
# store model params
filename = paste(future,i+1,".txt")
write.table(tidy(model), file = filename)
test = x_and_stack_test[(length(x_and_stack_test)-1):(length(x_and_stack_test))]
pred = forecast(model, h = 2)  #, xreg = as.matrix(test_and_stack_indicators[(batch_size*(i-1) + 1):batch_size*i,]))    ## 1-step ahead forecast
pred = as.numeric(pred$mean)
allpred = c(allpred, exp(pred))
results[future] = allpred
pointer = pointer + 1
}
head(results)
